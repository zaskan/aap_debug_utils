---
- include_tasks: init.yml

- include_tasks: generate_token.yml

- name: Set realm SSL option
  set_fact:
    sso_automation_platform_realm_ssl: "{{ 'all' if sso_use_https | bool else 'none' }}"
  when: sso_automation_platform_realm_ssl is not defined

- name: Create or update {{ sso_automation_platform_realm }} realm
  keycloak_realm:
    attributes:
      frontendUrl: '{{ sso_automation_platform_realm_frontendurl | default(sso_api_url_base) }}/'
    auth_client_id: admin-cli
    auth_keycloak_url: '{{ sso_api_url_base }}'
    auth_realm: master
    auth_username: '{{ sso_console_admin_username }}'
    auth_password: '{{ sso_console_admin_password }}'
    display_name: '{{ sso_automation_platform_realm_displayname }}'
    enabled: yes
    id: '{{ sso_automation_platform_realm }}'
    login_theme: '{{ sso_automation_platform_login_theme | basename }}'
    realm: '{{ sso_automation_platform_realm }}'
    ssl_required: '{{ sso_automation_platform_realm_ssl }}'
    state: present
    validate_certs: false
  no_log: "{{ _no_log }}"

- name: Get {{ sso_automation_platform_realm }} realm
  uri:
    url: "{{ sso_api_url_base }}/realms/{{ sso_automation_platform_realm }}"
    method: GET
    headers:
      Authorization: 'Bearer {{ sso_token }}'
    validate_certs: false
  no_log: "{{ _no_log }}"
  ignore_errors: true
  register: sso_get_realm

- name: Get realm public key
  set_fact:
    sso_realm_public_key: "{{ sso_get_realm.json.public_key }}"
  no_log: "{{ _no_log }}"
